# УДАЛИТЬ: в условии задачи сказано использовать средства модуля pathlib и объектов Path
# ИСПРАВИТЬ: импорт из стандартной библиотеки и внешних модулей/пакетов в общем случае предпочтительнее осуществлять с помощью инструкции from ... import ...
import os

from pathlib import Path


# ИСПОЛЬЗОВАТЬ: для аннотации базовых типов нет нужды использовать строковые литералы — кавычки избыточны
def list_files(path: 'str') -> tuple:
    """Возвращает кортеж с именами файлов в каталоге по переданному пути."""
    DIR_PATH = Path(path)
    # ИСПРАВИТЬ: у объектов Path есть метод iterdir() — он эффективнее и быстрее, чем функции модуля os
    list_file = os.listdir(DIR_PATH)
    # ИСПРАВИТЬ: с генераторным выражением не пришлось бы создавать избыточный список — более эффективная работа с памятью
    out = []
    for file in list_file:
        local_path = DIR_PATH / file
        if local_path.is_file():
            out.append(file)
    return tuple(out)


# УДАЛИТЬ везде: в этом комментарии нет необходимости, такие не нужно добавлять
# D:\TOP\Sizov>python -i 2023.06.22\1.py


# >>> list_files(r'2023.06.22/data')
# ('7MD9i.chm', 'conf.py', 'E3ln1.txt', 'F1jws.jpg', 'le1UO.txt', 'q40Kv.docx', 'questions.quiz', 'r62Bf.txt', 'vars.py', 'xcD1a.zip')


# ИТОГ: хорошо, но можно лучше — 3/5
